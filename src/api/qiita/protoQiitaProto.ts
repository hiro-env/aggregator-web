/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * proto/qiita.proto
 * OpenAPI spec version: version not set
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  QiitaSearchResponse,
  QiitaServiceSearchArticlesParams,
  RpcStatus
} from './protoQiitaProto.schemas'
import { fetcher } from '../../lib/fetcher';


  
  /**
 * @summary Ê§úÁ¥¢„ÉØ„Éº„Éâ„Å´Âü∫„Å•„ÅÑ„Å¶Ë®ò‰∫ã„ÇíÊ§úÁ¥¢„Åô„ÇãRPC
 */
export const qiitaServiceSearchArticles = (
    params?: QiitaServiceSearchArticlesParams,
 ) => {
      return fetcher<QiitaSearchResponse>(
      {url: `/qiita/articles`, method: 'GET',
        params
    },
      );
    }
  


export const getQiitaServiceSearchArticlesKey = (params?: QiitaServiceSearchArticlesParams,) => [`/qiita/articles`, ...(params ? [params]: [])] as const;


export type QiitaServiceSearchArticlesQueryResult = NonNullable<Awaited<ReturnType<typeof qiitaServiceSearchArticles>>>
export type QiitaServiceSearchArticlesQueryError = RpcStatus

/**
 * @summary Ê§úÁ¥¢„ÉØ„Éº„Éâ„Å´Âü∫„Å•„ÅÑ„Å¶Ë®ò‰∫ã„ÇíÊ§úÁ¥¢„Åô„ÇãRPC
 */
export const useQiitaServiceSearchArticles = <TError = RpcStatus>(
  params?: QiitaServiceSearchArticlesParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof qiitaServiceSearchArticles>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getQiitaServiceSearchArticlesKey(params) : null);
  const swrFn = () => qiitaServiceSearchArticles(params, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

